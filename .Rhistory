})
loc_f_window <- lapply(yield_curves_window, function(x){
res <- get_lf(yield_curve=x, lambda=lambda)
return(res)
})
macro_window <- lapply(macro, function(x){
return(x[(i - size):i,])
})
glob_f <- get_glob_f(loc_f_window)
eq5 <- eq5f(glob_f)
glob_f_hat <- as.xts(t(eq5$Phi %*% t(glob_f[length(time(glob_f)),])), order.by = time(yield_curves$US)[i + 1])
colnames(glob_f_hat) <- c("level", "slope", "curvature")
if(macro_switch){
eq67 <- ext1alt(loc_f_window, macro_window, glob_f)
x_reg <- lapply(macro, function(x){
return(lapply(glob_f_hat, function(y){
return(cbind(y, x$capacity.utilization[i + 1], x$inflation[i + 1],
x$interest.rate[i + 1], x$unemployment[i + 1]))
})
)
})
} else {
eq67 <- eq67f(loc_f_window, glob_f)
x_reg <- lapply(yield_curves_window, function(x){
return(glob_f_hat)
})
}
loc_f_hat <- mapply(function(x, y){
level_reg <- y$level
level_hat <- predict(x$level, n.ahead = 1, newxreg = level_reg)$pred
slope_reg <- y$slope
slope_hat <- predict(x$slope, n.ahead = 1, newxreg = slope_reg)$pred
curvature_reg <- y$curvature
curvature_hat <- predict(x$curvature, n.ahead = 1, newxreg = curvature_reg)$pred
return(xts(cbind(level_hat, slope_hat, curvature_hat), order.by = time(y$level)))
}, x = eq67, y = x_reg, SIMPLIFY = FALSE)
y_bar <- lapply(loc_f_hat, function(x){
tmp <- as.xts(x %*% lambdaMatrix, order.by = time(x))
colnames(tmp) <- tau
return(tmp)
})
if(ma_switch){
ma <- get_ma_eq(yield_curves_window, lambda)
y_bar <- mapply(function(x, y, z){
alpha_tau <- x$coefficients[grepl("factor", names(x$coefficients))]
res_effect <- x$coefficients["res"] * y[size - 1]
y_bar_effect <- x$coefficients["fit"] * z
time(res_effect) <- time(z)
tmp <- alpha_tau + y_bar_effect + res_effect
colnames(tmp) <- tau
return(tmp)
}, x = ma$Ext2, y = ma$Res, z = y_bar, SIMPLIFY = FALSE)
}
print(i)
y_hat <- mapply(function(x, y){
return(rbind(x, y))
}, x = y_hat, y = y_bar, SIMPLIFY = FALSE)
}
save(y_hat, file = "./Data/y_hat_ma.RData")
## I  ################################################################################################
library(forecast)
library(MTS)
library(zoo)
library(stats)
load("./Data/grouped_yield_curves.RData")
load("./Data/grouped_macro.RData")
source("./Utils/generate_latent_factors.R")
source("range.R")
source("./forecasting_utils.R")
size <- 36
macro <- lapply(loc_f, stats::lag)
tau <- as.numeric(colnames(yield_curves$US))
lambdaMatrix <- LambdaMat(tau, lambda)
macro_switch <- TRUE
ma_switch <- TRUE
y_hat <- lapply(yield_curves, function(x){
tmp <- as.xts(t(rep(NA, length(tau))), order.by = time(x[size]))
colnames(tmp) <- tau
return(tmp)
})
yield_curves <- lapply(yield_curves, function(x){
return(rbind(x, as.xts(t(rep(NA, length(tau))), order.by = as.Date("1 Jan 2018", format = "%d %b %Y"))))
})
# forecaster <- function(yield_curves, macro, size, ma_switch, macro_switch){
#
# }
for (i in size:length(time(yield_curves$US))) {
yield_curves_window <- lapply(yield_curves, function(x){
return(x[(i - size):i,])
})
loc_f_window <- lapply(yield_curves_window, function(x){
res <- get_lf(yield_curve=x, lambda=lambda)
return(res)
})
macro_window <- lapply(macro, function(x){
return(x[(i - size):i,])
})
glob_f <- get_glob_f(loc_f_window)
eq5 <- eq5f(glob_f)
glob_f_hat <- as.xts(t(eq5$Phi %*% t(glob_f[length(time(glob_f)),])), order.by = time(yield_curves$US)[i + 1])
colnames(glob_f_hat) <- c("level", "slope", "curvature")
if(macro_switch){
eq67 <- ext1alt(loc_f_window, macro_window, glob_f)
x_reg <- lapply(macro, function(x){
return(lapply(glob_f_hat, function(y){
return(cbind(y, x$capacity.utilization[i + 1], x$inflation[i + 1],
x$interest.rate[i + 1], x$unemployment[i + 1]))
})
)
})
} else {
eq67 <- eq67f(loc_f_window, glob_f)
x_reg <- lapply(yield_curves_window, function(x){
return(glob_f_hat)
})
}
loc_f_hat <- mapply(function(x, y){
level_reg <- y$level
level_hat <- predict(x$level, n.ahead = 1, newxreg = level_reg)$pred
slope_reg <- y$slope
slope_hat <- predict(x$slope, n.ahead = 1, newxreg = slope_reg)$pred
curvature_reg <- y$curvature
curvature_hat <- predict(x$curvature, n.ahead = 1, newxreg = curvature_reg)$pred
return(xts(cbind(level_hat, slope_hat, curvature_hat), order.by = time(y$level)))
}, x = eq67, y = x_reg, SIMPLIFY = FALSE)
y_bar <- lapply(loc_f_hat, function(x){
tmp <- as.xts(x %*% lambdaMatrix, order.by = time(x))
colnames(tmp) <- tau
return(tmp)
})
if(ma_switch){
ma <- get_ma_eq(yield_curves_window, lambda)
y_bar <- mapply(function(x, y, z){
alpha_tau <- x$coefficients[grepl("factor", names(x$coefficients))]
res_effect <- x$coefficients["res"] * y[size - 1]
y_bar_effect <- x$coefficients["fit"] * z
time(res_effect) <- time(z)
tmp <- alpha_tau + y_bar_effect + res_effect
colnames(tmp) <- tau
return(tmp)
}, x = ma$Ext2, y = ma$Res, z = y_bar, SIMPLIFY = FALSE)
}
print(i)
y_hat <- mapply(function(x, y){
return(rbind(x, y))
}, x = y_hat, y = y_bar, SIMPLIFY = FALSE)
}
## I  ################################################################################################
library(forecast)
library(MTS)
library(zoo)
library(stats)
load("./Data/grouped_yield_curves.RData")
load("./Data/grouped_macro.RData")
source("./Utils/generate_latent_factors.R")
source("range.R")
source("./forecasting_utils.R")
size <- 60
macro <- lapply(loc_f, stats::lag)
tau <- as.numeric(colnames(yield_curves$US))
lambdaMatrix <- LambdaMat(tau, lambda)
macro_switch <- TRUE
ma_switch <- TRUE
y_hat <- lapply(yield_curves, function(x){
tmp <- as.xts(t(rep(NA, length(tau))), order.by = time(x[size]))
colnames(tmp) <- tau
return(tmp)
})
yield_curves <- lapply(yield_curves, function(x){
return(rbind(x, as.xts(t(rep(NA, length(tau))), order.by = as.Date("1 Jan 2018", format = "%d %b %Y"))))
})
# forecaster <- function(yield_curves, macro, size, ma_switch, macro_switch){
#
# }
for (i in size:length(time(yield_curves$US))) {
yield_curves_window <- lapply(yield_curves, function(x){
return(x[(i - size):i,])
})
loc_f_window <- lapply(yield_curves_window, function(x){
res <- get_lf(yield_curve=x, lambda=lambda)
return(res)
})
macro_window <- lapply(macro, function(x){
return(x[(i - size):i,])
})
glob_f <- get_glob_f(loc_f_window)
eq5 <- eq5f(glob_f)
glob_f_hat <- as.xts(t(eq5$Phi %*% t(glob_f[length(time(glob_f)),])), order.by = time(yield_curves$US)[i + 1])
colnames(glob_f_hat) <- c("level", "slope", "curvature")
if(macro_switch){
eq67 <- ext1alt(loc_f_window, macro_window, glob_f)
x_reg <- lapply(macro, function(x){
return(lapply(glob_f_hat, function(y){
return(cbind(y, x$capacity.utilization[i + 1], x$inflation[i + 1],
x$interest.rate[i + 1], x$unemployment[i + 1]))
})
)
})
} else {
eq67 <- eq67f(loc_f_window, glob_f)
x_reg <- lapply(yield_curves_window, function(x){
return(glob_f_hat)
})
}
loc_f_hat <- mapply(function(x, y){
level_reg <- y$level
level_hat <- predict(x$level, n.ahead = 1, newxreg = level_reg)$pred
slope_reg <- y$slope
slope_hat <- predict(x$slope, n.ahead = 1, newxreg = slope_reg)$pred
curvature_reg <- y$curvature
curvature_hat <- predict(x$curvature, n.ahead = 1, newxreg = curvature_reg)$pred
return(xts(cbind(level_hat, slope_hat, curvature_hat), order.by = time(y$level)))
}, x = eq67, y = x_reg, SIMPLIFY = FALSE)
y_bar <- lapply(loc_f_hat, function(x){
tmp <- as.xts(x %*% lambdaMatrix, order.by = time(x))
colnames(tmp) <- tau
return(tmp)
})
if(ma_switch){
ma <- get_ma_eq(yield_curves_window, lambda)
y_bar <- mapply(function(x, y, z){
alpha_tau <- x$coefficients[grepl("factor", names(x$coefficients))]
res_effect <- x$coefficients["res"] * y[size - 1]
y_bar_effect <- x$coefficients["fit"] * z
time(res_effect) <- time(z)
tmp <- alpha_tau + y_bar_effect + res_effect
colnames(tmp) <- tau
return(tmp)
}, x = ma$Ext2, y = ma$Res, z = y_bar, SIMPLIFY = FALSE)
}
print(i)
y_hat <- mapply(function(x, y){
return(rbind(x, y))
}, x = y_hat, y = y_bar, SIMPLIFY = FALSE)
}
load("~/Repos/Diebold-et-al-2008-Replication/Data/extention2_results.RData")
getwd()
getwd()
getwd()
load("~/Repos/Diebold-et-al-2008-Replication/Data/latent_factor_data.RData")
plot.xts(glob_f, legend.loc = "topright")
?approx
load("~/Repos/Diebold-et-al-2008-Replication/Data/grouped_yield_curves.RData")
acf(coredata(yield_curves$US))
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
table.Autocorrelation(yield_curves$US, digits = 4)
View(table.Autocorrelation(yield_curves$US, digits = 4))
?table.Autocorrelation
rep("rho", 3)
paste(rep("rho", 3), 1:3)
getwd()
source("Analysis/table.Autocorrelation.R")
source("Analysis/table.Autocorrelation.R")
source("Analysis/table.Autocorrelation.R")
load("./Data/grouped_yield_curves.RDatar")
load("./Data/grouped_yield_curves.RData")
table.Autocorrelation(yield_curves$US)
table.Autocorrelation(yield_curves$US, k = 30)
source("Analysis/table.Autocorrelation.R")
table.Autocorrelation(yield_curves$US, k = 30)
source("Analysis/table.Autocorrelation.R")
table.Autocorrelation(yield_curves$US, k = 30)
source("Analysis/table.Autocorrelation.R")
table.Autocorrelation(yield_curves$US, k = 30)
source("Analysis/table.Autocorrelation.R")
table.Autocorrelation(yield_curves$US, k = 30)
table.Autocorrelation(yield_curves$US, max.lag = 30)
res <- lapply(yield_curves, table.Autocorrelation(k = 30))
res <- lapply(yield_curves, table.Autocorrelation(max.lag = 30))
res <- lapply(yield_curves, table.Autocorrelation(x, max.lag = 30))
res <- lapply(yield_curves, function(x) {
return(table.Autocorrelation(x, digits = 2, max.lag = 30))
})
write.table(res, file = "autocorrelations.xls")
psych::describe()
?psych::describe
"6" in colnames(yield_curves$US)
"6" %in% colnames(yield_curves$US)
yield_curves$US[, grepl(c("6", "12", "60", "120"))]
yield_curves$US[, grepl(c("6", "12", "60", "120"), colnames(yield_curves$US))]
autocorrelations <- lapply(yield_curves, function(x) {
return(table.Autocorrelation(x[, grepl(included_mat, colnames(x))], digits = 2, max.lag = 30))
})
descriptives <- lapply(yield_curves, function(x){
return(describe(x[, grepl(included_mat, colnames(x))], skew=FALSE, ranges=FALSE))
})
included_mat <- c("6", "12", "60", "120")
autocorrelations <- lapply(yield_curves, function(x) {
return(table.Autocorrelation(x[, grepl(included_mat, colnames(x))], digits = 2, max.lag = 30))
})
descriptives <- lapply(yield_curves, function(x){
return(psych::describe(x[, grepl(included_mat, colnames(x))], skew=FALSE, ranges=FALSE))
})
yield_curves$US[,grepl(included_mat, colnames(yield_curves$US))]
View(yield_curves$US[,grepl(included_mat, colnames(yield_curves$US))])
included_mat
autocorrelations <- lapply(yield_curves, function(x) {
return(table.Autocorrelation(x[, included_mat], digits = 2, max.lag = 30))
})
descriptives <- lapply(yield_curves, function(x){
return(psych::describe(x[, included_mat], skew=FALSE, ranges=FALSE))
})
autocorrelations$US
descriptives$US
write.table(autocorrelations, file = "./Data/autocorrelations.xls")
write.table(descriptives, file = "./Data/descriptives.xls")
included_mat <- c("6", "12", "60", "120")
autocorrelations <- lapply(yield_curves, function(x) {
return(table.Autocorrelation(x[, included_mat], digits = 2, max.lag = 30))
})
descriptives <- lapply(yield_curves, function(x){
return(psych::describe(x[, included_mat], skew=FALSE))
})
write.table(descriptives, file = "./Data/descriptives.xls")
load("~/Repos/Diebold-et-al-2008-Replication/Data/latent_factor_data.RData")
View(loc_f$US)
lf_autocorr <- lapply(loc_f, function(x) {
return(table.Autocorrelation(x, digits = 2, max.lag = 30))
})
lf_desript <- lapply(loc_f, function(x){
return(psych::describe(x, skew=FALSE))
})
source("Analysis/table.Autocorrelation.R")
lf_autocorr <- lapply(loc_f, function(x) {
return(table.Autocorrelation(x, digits = 2, max.lag = 30))
})
lf_desript <- lapply(loc_f, function(x){
return(psych::describe(x, skew=FALSE))
})
write.table(lf_autocorr, file = "./Tables/lf_autocorrelations.xls")
write.table(lf_descript, file = "./Tables/lf_descriptions.xls")
lf_descript <- lapply(loc_f, function(x){
return(psych::describe(x, skew=FALSE))
})
write.table(lf_descript, file = "./Tables/lf_descriptions.xls")
install.packages("plotly")
library(plotly)
library(plotly)
p <- plot_ly(z = ~volcano) %>% add_surface()
chart_link = api_create(p, filename="surface-1")
Sys.setenv("plotly_username"="stanimir.s.ivanov")
Sys.setenv("plotly_username"="stanimir.s.ivanov")
Sys.setenv("plotly_api_key"="AMUk5BtS1jyWylXfHT1f")
load("./Data/grouped_yield_curves.RData")
p <- plot_ly(z = ~yield_curves$US) %>% add_surface()
chart_link = api_create(p, filename="us-yield-curve")
p <- plot_ly(z = ~yield_curves$US) %>% add_surface()
chart_link = api_create(p, filename="./Plots/us-yield-curve")
p
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("plot3D")
lapply(yield_curves, function(x){
write.csv(x, file = x)
})
lapply(yield_curves, function(x){
write.csv(x)
})
write.csv(yield_curves$US, file = "us.csv")
lapply(yield_curves, function(x){
write.csv(x, file = paste0(x, ".csv"))
})
v
write.csv(yield_curves$US, file = "us.csv")
write.csv(yield_curves$CA, file = "ca.csv")
write.csv(yield_curves$JP, file = "jp.csv")
write.csv(yield_curves$DE, file = "de.csv")
write.csv(yield_curves$UK, file = "uk.csv")
write.csv(time(yield_curves$US), file = "./Export/time.csv"
)
View(time(yield_curves$US))
View(yield_curves$US)
library(zoo)
library(xts)
View(yield_curves$US)
write.csv(time(yield_curves$US), file = "./Export/time.csv"
)
View(time(yield_curves$US))
load("~/Repos/Diebold-et-al-2008-Replication/Data/replication_results.RData")
eq67$US
write.table(eq67, file = "./Analysis/eq67.xls")
write.table(eq67$US$level$coef, file = "./Analysis/eq67.xls")
write.table(summary(eq67$US$level), file = "./Analysis/eq67.xls")
summary(eq67$US$level)
c(eq67$US$level$coef, eq67$US$level$sigma2)
cbind(eq67$US$level$coef, eq67$US$level$sigma2)
rbind(eq67$US$level$coef, eq67$US$level$sigma2)
eq67data <- lapply(eq67, function(x){
lapply(x, function(y){
res <- c(y$coef, y$sigma2)
colnames(res) <- c(colnames(y$coef, "sigma2"))
return(res)
})
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
colnames(res) <- c(colnames(y$coef, "sigma2"))
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
names(res) <- c(names(y$coef), "sigma2")
return(res)
}))
})
eq67data$US$level
write.table(eq67data, file = "./Analysis/eq67data.xls")
eq67$US$level$var.coef
eq67$US$levelcoef
eq67$US$level$coef
eq67$US$level$coef
eq67$US$level$sigma2
eq67$US$level$var.coef
sqrt(eq67$US$level$var.coef)
diag(sqrt(eq67$US$level$var.coef))
eq67$US$level$mask
sigma = 0.43*0.43
sigma * sqrt(2/(239))
sigma = .28^2
sigma * sqrt(2/(239))
sigma = .12^2
sigma * sqrt(2/(239))
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
res <- rbind(diag(sqrt(x$var.coef)), NA)
names(res) <- c(names(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
res <- rbind(diag(sqrt(x$var.coef)), NaN)
names(res) <- c(names(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
res <- rbind(res, c(diag(sqrt(x$var.coef)), NaN))
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67$US$level$var.coef
sqrt(eq67$US$level$var.coef)
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
res <- rbind(res, c(diag(sqrt(x$var.coef)), NaN))
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- c(y$coef, y$sigma2)
res <- rbind(res, c(diag(sqrt(y$var.coef)), NaN))
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- rbind(c(y$coef, y$sigma2), c(diag(sqrt(y$var.coef)), NaN))
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- rbind(c(y$coef, y$sigma2), c(diag(sqrt(y$var.coef)), NaN))
print(res)
colnames(res) <- c(colnames(y$coef), "sigma2")
return(res)
}))
})
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- rbind(c(y$coef, y$sigma2), c(diag(sqrt(y$var.coef)), NaN))
print(res)
colnames(res) <- c(names(y$coef), "sigma2")
return(res)
}))
})
eq67data$US$level
eq67data <- lapply(eq67, function(x){
return(lapply(x, function(y){
res <- rbind(c(y$coef, sqrt(y$sigma2)), c(diag(sqrt(y$var.coef)), NaN))
colnames(res) <- c(names(y$coef), "sigma")
return(res)
}))
})
eq67data$US$level
write.table(eq67data, file = "./Analysis/eq67data.xls")
write.table(eq67data, file = "./Analysis/eq67data.xls")
