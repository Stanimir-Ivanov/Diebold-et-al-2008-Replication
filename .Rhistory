View(lag(glob_f), k = 1))
View(lag(glob_f, k = 1))
remove(dplyr)
remove("dplyr", detach = TRUE)
detach(package = "dplyr")
detach("package:dplyr", unload = TRUE)
library(xts)
lag(glob_f, k = 1)
lm(glob_f ~ lag(glob_f, k = 1))
lm(glob_f ~ 0 + lag(glob_f, k = 1))
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
eq5
?stats
library(stats)
?arima
View(us_lf)
load("./Data/yield_curve_data.RData")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(us_lf))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(us_lf))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(us_lf))
load("./Data/yield_curve_data.RData")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(us_lf))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(us_lf))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(us_lf))
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
save.image("./Data/latent_factor_data.RData")
View(ca_lf)
load("./Data/yield_curve_data.RData")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(us_lf))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(us_lf))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(us_lf))
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
save.image("./Data/latent_factor_data.RData")
load("./Data/yield_curve_data.RData")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(loc_level))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(loc_slope))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(loc_curvature))
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
save.image("./Data/latent_factor_data.RData")
load("./Data/yield_curve_data.RData")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(loc_level))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(loc_slope))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(loc_curvature))
remove(pr_level)
remove(pr_slope)
remove(pr_curvature)
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
save.image("./Data/latent_factor_data.RData")
View(glob_curvature)
View(glob_level)
View(glob_slope)
View(loc_curvature)
View(loc_level)
View(loc_slope)
View(local_f)
local_f[["US"]]
type(local_f[["US"]])
class(local_f[["US"]])
load("./Data/yield_curve_data.RData")
setwd("./LF Utils/")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(loc_level))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(loc_slope))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(loc_curvature))
remove(pr_level)
remove(pr_slope)
remove(pr_curvature)
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
setwd("..")
save.image("./Data/latent_factor_data.RData")
load("./Data/yield_curve_data.RData")
setwd("./LF Utils/")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(loc_level))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(loc_slope))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(loc_curvature))
remove(pr_level)
remove(pr_slope)
remove(pr_curvature)
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
setwd("..")
save.image("./Data/latent_factor_data.RData")
?arima
test <- lapply(loc_f, function(x) {
return(arima(x, order = c(0, 0, 1), xreg = glob_f))
})
install.packages(marima)
install.packages("marima")
library(marima)
spec <- define.model(kvar = 6, ma = c(1, 2, 3), reg.var = c(4, 5, 6))
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = c(1, 2, 3), reg.var = c(4, 5, 6))
return(marima(DATA = series, ma.pattern = spec$ma.pattern))
})
detach("package:dplyr", unload = TRUE)
library(marima)
library(xts)
load("./Data/latent_factor_data.RData")
glob_f <- cbind(glob_level, glob_slope, glob_curvature)
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = c(1, 2, 3), reg.var = c(4, 5, 6))
return(marima(DATA = series, ma.pattern = spec$ma.pattern))
})
test
detach("package:dplyr", unload = TRUE)
library(marima)
library(xts)
load("./Data/latent_factor_data.RData")
glob_f <- cbind(glob_level, glob_slope, glob_curvature)
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = 1, indep = 1:3, reg.var = 4:6)
return(marima(DATA = series, ma.pattern = spec$ma.pattern))
})
eq6 <- arima()
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = 1, indep = c(1:3), reg.var = c(4:6))
return(marima(DATA = series, ma.pattern = spec$ma.pattern))
})
test
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = 1, indep = c(1:3), reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ma = 1, reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$UK
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 0, ma = 1, reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 1, ma = 1, reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test#US
test$US
?varimax
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 1, ma = 1, indep = c(1:3),  reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 1, ma = 1,  reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 1, ma = 1, indep = c(4:6),  reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
test$US
test <- lapply(loc_f, function(x) {
series <- cbind(x, glob_f)
spec <- define.model(kvar = 6, ar = 1, ma = 1,  reg.var = c(4:6))
return(marima(DATA = series, ar.pattern = spec$ar.pattern, ma.pattern = spec$ma.pattern))
})
test$US
?arima
load("./Data/yield_curve_data.RData")
setwd("./LF Utils/")
source("generate_latent_factors.R")
# filter yield curves only for specified time series
start_date <- "Apr 1995"
end_date <- "Apr 2018"
source("filter_yield_curves.R")
# interpolate yield curves for specified maturities
xout <- c(6, 9 ,12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120)
source("interpolate_yield_curves.R")
# estimate Nelson-Siegel latent factors
lambda <- 0.0609
us_lf <- get_lf(us_yield_curve, lambda)
ca_lf <- get_lf(ca_yield_curve, lambda)
jp_lf <- get_lf(jp_yield_curve, lambda)
de_lf <- get_lf(de_yield_curve, lambda)
uk_lf <- get_lf(uk_yield_curve, lambda)
source("group_latent_factors.R")
# perform PCA
pr_level <- prcomp(loc_level, center = TRUE, scale. = TRUE)
pr_slope <- prcomp(loc_slope, center = TRUE, scale. = TRUE)
pr_curvature <- prcomp(loc_curvature, center = TRUE, scale. = TRUE)
glob_level <- as.xts(-pr_level$x[,"PC1"], order.by = time(loc_level))
glob_slope <- as.xts(-pr_slope$x[,"PC1"], order.by = time(loc_slope))
glob_curvature <- as.xts(-pr_curvature$x[,"PC1"], order.by = time(loc_curvature))
glob_f <- cbind(glob_level, glob_slope, glob_curvature)
colnames(glob_f) <- c("level", "slope", "curvature")
remove(glob_level)
remove(glob_slope)
remove(glob_curvature)
remove(pr_level)
remove(pr_slope)
remove(pr_curvature)
remove(us_yield_curve)
remove(ca_yield_curve)
remove(jp_yield_curve)
remove(uk_yield_curve)
remove(de_yield_curve)
setwd("..")
save.image("./Data/latent_factor_data.RData")
View(loc_f)
View(loc_curvature)
View(loc_level)
View(loc_slope)
test <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, curvature = "curvature"))
})
test$US
detach("package:dplyr", unload = TRUE)
library(marima)
library(xts)
load("./Data/latent_factor_data.RData")
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
test <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
eq6 <- arima()
?arima
detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
test <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
eq6 <- arima()
# detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
test <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
eq6 <- arima()
eq5 <- lm(glob_f ~ 0 + lag(glob_f))
eq67 <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
eq667
eq67
eq67$US
?VAR
library(stats)
?VAR
library(MTS)
install.pacakge("MTS")
install.pacakges("MTS")
install.packages("MTS")
library(MTS)
?VAR
res <- VAR(glob_f, p = 1)
restrMat <- eye(3)
restMatr <- 1 - diag(3)
restMatr
res <- VAR(glob_f, p = 1, fixed = restMatr)
res <- VAR(glob_f, p = 1, fixed = restMatr, include.mean = FALSE)
res <- VAR(glob_f, p = 1, fixed = diag(3), include.mean = FALSE)
# detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- VAR(glob_f, p = 1, fixed = diag(3), include.mean = FALSE)
eq67 <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
# detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- VAR(glob_f, p = 1, fixed = diag(3), include.mean = FALSE, output = FALSE)
eq67 <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
View(eq5)
View(eq67)
# detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- VAR(glob_f, p = 1, fixed = diag(3), include.mean = FALSE, output = FALSE)
eq67 <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
remove(glob_f)
remove(loc_f)
remove(loc_level)
remove(loc_slope)
remove(loc_curvature)
save.image("./Data/factor_dynamics_data")
# detach("package:dplyr", unload = TRUE)
library(xts)
library(stats)
load("./Data/latent_factor_data.RData")
eq5 <- VAR(glob_f, p = 1, fixed = diag(3), include.mean = FALSE, output = FALSE)
eq67 <- lapply(loc_f, function(x) {
level <- arima(x$level, order = c(0, 0, 1), xreg = glob_f$level)
slope <- arima(x$slope, order = c(0, 0, 1), xreg = glob_f$slope)
curvature <- arima(x$curvature, order = c(0, 0, 1) , xreg = glob_f$curvature)
return(list("level" = level, "slope" = slope, "curvature" = curvature))
})
remove(glob_f)
remove(loc_f)
remove(loc_level)
remove(loc_slope)
remove(loc_curvature)
save.image("./Data/factor_dynamics_data.RData")
